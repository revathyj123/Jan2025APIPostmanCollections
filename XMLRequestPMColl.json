{
	"info": {
		"_postman_id": "0f348ad0-faa1-4400-83bc-8cf1507e006b",
		"name": "XMLRequest_10March",
		"description": "13th session - 10thMarch 2025 - This collection is for sending XML request body using script(1-SendXMLRequestBodyUsingScript) using datadriven approach ItemDataXml_10March.csv, GoRestAPI-GetAllUsers,GetAUserByID in XML format and test the results.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41835826"
	},
	"item": [
		{
			"name": "1-SendXMLRequestBodyUsingScript",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let options ={\r",
							"    'method':'POST',\r",
							"    'url':'http://httpbin.org/post',\r",
							"    'headers':{\r",
							"        'content-type':'application/xml'\r",
							"    },\r",
							"    'body':`<?xmlversion=\"1.0\"?>\r",
							"    <items>\r",
							"        <item>\r",
							"            <full_name>{{full_name}}</full_name>\r",
							"            <phone>{{phone}}</phone>\r",
							"            <email>{{email}}</email>\r",
							"            <currency>{{currency}}</currency>\r",
							"            <number>{{number}}</number>\r",
							"            <price>{{price}}</price>\r",
							"        </item>\r",
							"        <item>\r",
							"            <full_name>{{full_name}}</full_name>\r",
							"            <phone>{{phone}}</phone>\r",
							"            <email>{{email}}</email>\r",
							"            <currency>{{currency}}</currency>\r",
							"            <number>{{number}}</number>\r",
							"            <price>{{price}}</price>\r",
							"        </item>\r",
							"        <item>\r",
							"            <full_name>{{full_name}}</full_name>\r",
							"            <phone>{{phone}}</phone>\r",
							"            <email>{{email}}</email>\r",
							"            <currency>{{currency}}</currency>\r",
							"            <number>{{number}}</number>\r",
							"            <price>{{price}}</price>\r",
							"        </item>\r",
							"        <item>\r",
							"            <full_name>{{full_name}}</full_name>\r",
							"            <phone>{{phone}}</phone>\r",
							"            <email>{{email}}</email>\r",
							"            <currency>{{currency}}</currency>\r",
							"            <number>{{number}}</number>\r",
							"            <price>{{price}}</price>\r",
							"        </item>\r",
							"    </items>`\r",
							"};\r",
							"\r",
							"//get the Item data from ItemDataXml_10March.csv file and update in the xml\r",
							"const full_nameData=pm.iterationData.get('full_name');\r",
							"const phoneData=pm.iterationData.get('phone');\r",
							"const emailData=pm.iterationData.get('email');\r",
							"const currencyData=pm.iterationData.get('currency');\r",
							"const numberData=pm.iterationData.get('number');\r",
							"const priceData=pm.iterationData.get('price');\r",
							"\r",
							"console.log(full_nameData,phoneData,emailData,currencyData,numberData,priceData);\r",
							"//replace the string with data from the csv file\r",
							"options.body=options.body.replace(/{{full_name}}/g,full_nameData);\r",
							"options.body=options.body.replace(/{{phone}}/g,phoneData);\r",
							"options.body=options.body.replace(/{{email}}/g,emailData);\r",
							"options.body=options.body.replace(/{{currency}}/g,currencyData);\r",
							"options.body=options.body.replace(/{{number}}/g,numberData);\r",
							"options.body=options.body.replace(/{{price}}/g,priceData);//g-globally replaces the price\r",
							"\r",
							"pm.sendRequest(options, function(error,response){\r",
							"    if(error){\r",
							"        console.log(error);\r",
							"    }\r",
							"    else{\r",
							"        console.log(response.status);\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "this is my xml body",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "http://httpbin.org/post",
					"protocol": "http",
					"host": [
						"httpbin",
						"org"
					],
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "2-GetAllUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//xml2js - a third party lib to convert xml to js in pm like cheeriofor html parsing\r",
							"const xml2js=require('xml2js');\r",
							"const xmlResponse=pm.response.text();\r",
							"\r",
							"//Parsing:\r",
							"xml2js.parseString(xmlResponse,function(error,response){\r",
							"    if(error){\r",
							"        console.log(error);\r",
							"    }\r",
							"    console.log(\"Parsed.xml\",response);\r",
							"\r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Check total users count is 10\",function(){\r",
							"        pm.expect(response.objects.object.length).to.eql(10);\r",
							"    });\r",
							"\r",
							"    pm.test('Fetch all the userids and check the count',function(){\r",
							"        const userids=response.objects.object.map(e=>e.id[0]._);\r",
							"        console.log(userids);\r",
							"        pm.expect(userids.length).to.eql(10);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Fetch all the names and check the count\",function(){\r",
							"        const userNames=response.objects.object.map(e=>e.name[0]);\r",
							"        console.log(userNames);\r",
							"        pm.expect(userNames.length).to.eql(10);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Fetch all the email and check the count\",function(){\r",
							"        const email=response.objects.object.map(e=>e.email[0]);\r",
							"        console.log(email);\r",
							"        pm.expect(email.length).to.eql(10);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://gorest.co.in/public/v2/users.xml",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users.xml"
					]
				}
			},
			"response": []
		},
		{
			"name": "3-GetAUserByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const xml2js=require('xml2js');\r",
							"const xmlResponse=pm.response.text();\r",
							"console.log(xmlResponse);\r",
							"\r",
							"xml2js.parseString(xmlResponse,function(error,response){\r",
							"    if(error){\r",
							"        console.log(error);\r",
							"    }\r",
							"    console.log(response);//parsed xml to JS object\r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Check the user data\",function(){\r",
							"        pm.expect(response.hash.name[0]).to.eql('Mrs. Shiv Mehra');\r",
							"        pm.expect(response.hash.status[0]).to.eql('inactive');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/7759056.xml",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						"7759056.xml"
					]
				}
			},
			"response": []
		}
	]
}