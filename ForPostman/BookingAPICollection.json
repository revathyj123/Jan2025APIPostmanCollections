{
	"info": {
		"_postman_id": "58579ef2-70b5-4aff-b433-c470b15a2e1f",
		"name": "BookingAPI_27Feb",
		"description": "API-[https://restful-booker.herokuapp.com/apidoc/index.html](https://restful-booker.herokuapp.com/apidoc/index.html)\n\nPurpose: Supply the Auth toke to headers using keys either cookie or Authorisation. We have to this for just PUT, PATCH and DELETE apil calls\n\nScript to be written in pre-request.\n\nNote: Scripts must be in 'pre-request' of PUT call. I have done a mistake by placing the code in post-response",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41835826"
	},
	"item": [
		{
			"name": "1_CreateAuthToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//const token = pm.response.json().token;\r",
							"//console.log(\"My auth token is \"+token);\r",
							"// pm.variables.set(\"tokenId\",token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" :\"{{userName}}\",\n    \"password\" : \"{{passWord}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/auth",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "2-GetAllBookings",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/booking",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateNewBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// const bookingid = pm.response.json().bookingid;\r",
							"// console.log(\"The booking id is \"+bookingid);\r",
							"// pm.variables.set(\"bookingid\",bookingid);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Jim\",\r\n    \"lastname\": \"Brown\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2018-01-01\",\r\n        \"checkout\": \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/booking",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "4-GetBookingbyID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//call the POST api to generate the booking ID by supplying the raw body \\\r",
							"pm.sendRequest({\r",
							"    method:'POST',\r",
							"    url:pm.environment.get(\"baseURL\")+'/booking',\r",
							"    header:{\r",
							"        'Content-Type':'application/json',\r",
							"        'Accept':'application/json'\r",
							"    },\r",
							"    body:{\r",
							"        'mode':'raw',\r",
							"        //JS obj to JSON string\r",
							"        raw:JSON.stringify({\r",
							"            \"firstname\": \"Revathy\",\r",
							"            \"lastname\": \"Test\",\r",
							"            \"totalprice\": 9999,\r",
							"            \"depositpaid\": true,\r",
							"            \"bookingdates\": {\r",
							"                \"checkin\": \"2025-04-04\",\r",
							"                \"checkout\": \"2019-05-05\"\r",
							"            },\r",
							"            \"additionalneeds\": \"Breakfast\"\r",
							"        })\r",
							"    }\r",
							"}, function(error,response){\r",
							"    if(error){\r",
							"        console.log(\"Error received = \"+error);\r",
							"    }\r",
							"    else{\r",
							"        //JSON to JS obj\r",
							"        const responseBody=JSON.parse(response.text());\r",
							"        const bookingid = responseBody.bookingid;\r",
							"        console.log(\"booking id received = \"+bookingid);\r",
							"        pm.variables.set(\"bookingid\", bookingid);\r",
							"        console.log(pm.variables.get(\"bookingid\"));\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/booking/{{bookingid}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "5-UpdateABooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Generate a token using \"auth\" API & fetch \"token\" from the response\r",
							"pm.sendRequest({\r",
							"    method: 'POST',\r",
							"    url:pm.environment.get(\"baseURL\")+'/auth',\r",
							"    header:{\r",
							"        'Content-Type' : 'application/json'\r",
							"    },\r",
							"    body:{\r",
							"        mode:'raw',\r",
							"        //JS obj to JSON string\r",
							"        raw: JSON.stringify({\r",
							"            \"username\":pm.environment.get(\"userName\"),\r",
							"            \"password\":pm.environment.get(\"passWord\")\r",
							"        })\r",
							"    }\r",
							"}, function(error,response){\r",
							"    if(error){\r",
							"        console.log(\"The error thrown is \"+error);\r",
							"    }\r",
							"    else{\r",
							"        //JSON to JS obj\r",
							"        const responseBody=JSON.parse(response.text());\r",
							"        const tokenId = responseBody.token;\r",
							"        console.log(\"Token id received = \"+tokenId);\r",
							"        pm.variables.set(\"new_tokenId\", tokenId);\r",
							"        console.log(pm.variables.get(\"new_tokenId\"));\r",
							"\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{new_tokenId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Reva\",\r\n    \"lastname\": \"Ganesh\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2018-01-01\",\r\n        \"checkout\": \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\": \"Dinner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/booking/{{bookingid}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteABooking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Generate a token using \"auth\" API & fetch \"token\" from the response\r",
							"pm.sendRequest({\r",
							"    method: 'POST',\r",
							"    url:pm.environment.get(\"baseURL\")+'/auth',\r",
							"    header:{\r",
							"        'Content-Type' : 'application/json'\r",
							"    },\r",
							"    body:{\r",
							"        mode:'raw',\r",
							"        //JS obj to JSON string\r",
							"        raw: JSON.stringify({\r",
							"            \"username\":pm.environment.get(\"userName\"),\r",
							"            \"password\":pm.environment.get(\"passWord\")\r",
							"        })\r",
							"    }\r",
							"}, function(error,response){\r",
							"    if(error){\r",
							"        console.log(\"The error thrown is \"+error);\r",
							"    }\r",
							"    else{\r",
							"        //JSON to JS obj\r",
							"        const responseBody=JSON.parse(response.text());\r",
							"        const tokenId = responseBody.token;\r",
							"        console.log(\"Token id received = \"+tokenId);\r",
							"        pm.variables.set(\"new_tokenId\", tokenId);\r",
							"        console.log(pm.variables.get(\"new_tokenId\"));\r",
							"\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{new_tokenId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/booking/{{bookingid}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		}
	]
}